{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","addTodo","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","uuid","TextField","label","type","name","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","TodoList","todos","List","map","key","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAwCeA,MApCf,YAAgC,IAAZC,EAAW,EAAXA,QAAW,EACLC,mBAAS,CAC/BC,GAAI,GACJC,KAAM,GACNC,WAAW,IAJgB,mBACtBC,EADsB,KAChBC,EADgB,KAsB7B,OACE,0BAAMC,UAAU,YAAYC,SAV9B,SAAsBC,GACpBA,EAAEC,iBAEEL,EAAKF,KAAKQ,SACZX,EAAQ,eAAKK,EAAN,CAAYH,GAAIU,iBACvBN,EAAQ,eAAKD,EAAN,CAAYF,KAAM,SAMzB,kBAACU,EAAA,EAAD,CACEC,MAAM,OACNC,KAAK,OACLC,KAAK,OACLC,MAAOZ,EAAKF,KACZe,SAtBN,SAA+BT,GAG7BH,EAAQ,eAAKD,EAAN,CAAYF,KAAMM,EAAEU,OAAOF,YAqBhC,kBAACG,EAAA,EAAD,CAAQL,KAAK,UAAb,Y,qDCJSM,MA3Bf,YAAqD,IAArChB,EAAoC,EAApCA,KAAMiB,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WASpC,OACE,kBAACC,EAAA,EAAD,CAAUC,MAAO,CAAEC,QAAS,SAC1B,kBAACC,EAAA,EAAD,CAAUC,QAASvB,EAAKD,UAAWyB,QAVvC,WACEP,EAAejB,EAAKH,OAUlB,kBAAC4B,EAAA,EAAD,CACEC,QAAQ,QACRN,MAAO,CACLO,eAAgB3B,EAAKD,UAAY,eAAiB,OAGnDC,EAAKF,MAER,kBAAC8B,EAAA,EAAD,CAAYJ,QAfhB,WACEN,EAAWlB,EAAKH,MAeZ,kBAAC,IAAD,SCNOgC,MAff,YAA0D,IAAtCC,EAAqC,EAArCA,MAAOZ,EAA8B,EAA9BA,WAAYD,EAAkB,EAAlBA,eACrC,OACE,kBAACc,EAAA,EAAD,KACGD,EAAME,KAAI,SAAChC,GAAD,OACT,kBAAC,EAAD,CACEiC,IAAKjC,EAAKH,GACVG,KAAMA,EACNkB,WAAYA,EACZD,eAAgBA,SCkDXiB,MAtDf,WAAgB,IAAD,EACatC,mBAAS,IADtB,mBACNkC,EADM,KACCK,EADD,KAuCb,OApCAC,qBAAU,WAER,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAPvB,0BAQlBJ,GACFF,EAASE,KAEV,IAEHD,qBAAU,WAERI,aAAaE,QAfS,wBAekBJ,KAAKK,UAAUb,MACtD,CAACA,IA0BF,yBAAK5B,UAAU,OACb,kBAACuB,EAAA,EAAD,CAAYL,MAAO,CAAEwB,QAAS,IAAMlB,QAAQ,MAA5C,cAGA,kBAAC,EAAD,CAAU/B,QA5Bd,SAAiBK,GAEfmC,EAAS,CAACnC,GAAF,mBAAW8B,QA2BjB,kBAAC,EAAD,CACEA,MAAOA,EACPZ,WAZN,SAAoBrB,GAClBsC,EAASL,EAAMe,QAAO,SAAC7C,GAAD,OAAUA,EAAKH,KAAOA,OAYxCoB,eA3BN,SAAwBpB,GACtBsC,EACEL,EAAME,KAAI,SAAChC,GACT,OAAIA,EAAKH,KAAOA,EACP,eACFG,EADL,CAEED,WAAYC,EAAKD,YAGdC,WC1BK8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.6e987eb9.chunk.js","sourcesContent":["import { Button, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n  const [todo, setTodo] = useState({\r\n    id: \"\",\r\n    task: \"\",\r\n    completed: false,\r\n  });\r\n\r\n  function handleTaskInputChange(e) {\r\n    // e.target.value contains new input from onChange\r\n    // event for input elements\r\n    setTodo({ ...todo, task: e.target.value });\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault(); // prevents browser refresh\r\n    // trim() gets rid of string whitespace\r\n    if (todo.task.trim()) {\r\n      addTodo({ ...todo, id: uuid() });\r\n      setTodo({ ...todo, task: \"\" });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n      <TextField\r\n        label=\"Task\"\r\n        type=\"text\"\r\n        name=\"task\"\r\n        value={todo.task}\r\n        onChange={handleTaskInputChange}\r\n      />\r\n      <Button type=\"submit\">Submit</Button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import { Checkbox, IconButton, ListItem, Typography } from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport React from \"react\";\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n  function handleCheckboxClick() {\r\n    toggleComplete(todo.id);\r\n  }\r\n\r\n  function handleRemoveClick() {\r\n    removeTodo(todo.id);\r\n  }\r\n\r\n  return (\r\n    <ListItem style={{ display: \"flex\" }}>\r\n      <Checkbox checked={todo.completed} onClick={handleCheckboxClick} />\r\n      <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n          textDecoration: todo.completed ? \"line-through\" : null,\r\n        }}\r\n      >\r\n        {todo.task}\r\n      </Typography>\r\n      <IconButton onClick={handleRemoveClick}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import { List } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, removeTodo, toggleComplete }) {\r\n  return (\r\n    <List>\r\n      {todos.map((todo) => (\r\n        <Todo\r\n          key={todo.id}\r\n          todo={todo}\r\n          removeTodo={removeTodo}\r\n          toggleComplete={toggleComplete}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import Typography from \"@material-ui/core/Typography\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport TodoList from \"./components/TodoList\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // fires when app component mounts to the DOM\r\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n    if (storageTodos) {\r\n      setTodos(storageTodos);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // fires when todos array gets updated\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  function addTodo(todo) {\r\n    // adds new todo to beginning of todos array\r\n    setTodos([todo, ...todos]);\r\n  }\r\n\r\n  function toggleComplete(id) {\r\n    setTodos(\r\n      todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            completed: !todo.completed,\r\n          };\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeTodo(id) {\r\n    setTodos(todos.filter((todo) => todo.id !== id));\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Typography style={{ padding: 16 }} variant=\"h1\">\r\n        React Todo\r\n      </Typography>\r\n      <TodoForm addTodo={addTodo} />\r\n      <TodoList\r\n        todos={todos}\r\n        removeTodo={removeTodo}\r\n        toggleComplete={toggleComplete}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}